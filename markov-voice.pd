#N canvas 16 23 1417 646 10;
#X obj 263 48 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 203 168 notes-to-index;
#X obj 297 170 loadbang;
#X obj 297 192 12;
#X obj 203 129 symbol c;
#X obj 214 93 t b s;
#X obj 203 241 list;
#X obj 135 376 alternatively-combine-two-lists;
#X obj 134 356 list;
#X msg 131 328 c cs d ds e f fs g gs a as b;
#X obj 203 268 t b l;
#X obj 134 399 t b l;
#X floatatom 20 590 5 0 0 0 - - -, f 5;
#X obj 7 31 t s;
#X obj 214 70 spigot 1;
#X obj 106 16 inlet;
#X text 83 1 starting note;
#X obj 263 16 inlet;
#X obj 375 17 inlet;
#X text 372 1 octave;
#X obj 541 21 inlet;
#X obj 660 21 inlet;
#X text 227 1 bang to pause/resume;
#X text 355 159 Calculate the index in the array corresponding to the
first potential pitch for the current pitch inputted. The first potential
pitch is always c in our data representation.;
#X text 309 218 We want all potential pitches for the current pitch.
This can be thought of as a full row in the transition matrix so we
read 12 items in the array starting from the index as calculated by
the current pitch.;
#X text 327 375 Combine list of pitches and probabilities to format
accepted by the weight abstraction.;
#X text 188 467 Calculate next pitch.;
#X obj 462 19 inlet;
#X text 463 4 tempo;
#X obj 375 56 s \$0-octave;
#X obj 462 57 s \$0-tempo;
#X obj 541 58 s \$0-delay-factor;
#X obj 363 468 r \$0-tempo;
#X obj 203 214 array get \$1;
#X obj 135 460 weight;
#N canvas 401 25 1214 670 rhythm 0;
#X obj 246 143 loadbang;
#X obj 171 206 list;
#X obj 273 298 alternatively-combine-two-lists;
#X obj 149 282 list;
#X obj 170 230 t b l;
#X obj 273 323 t b l;
#X text 346 243 Combine list of pitches and probabilities to format
accepted by the weight abstraction.;
#X text 327 392 Calculate next pitch.;
#X obj 271 393 weight;
#X obj 148 36 inlet;
#X obj 208 600 outlet;
#X obj 358 570 outlet;
#X text 353 590 delayed current note (symbol);
#X text 131 627 current midi note;
#X obj 729 31 inlet;
#X text 728 7 tempo;
#X obj 729 362 bpm2ms;
#X text 88 6 current note symbol;
#X obj 208 572 note2midi;
#X obj 112 541 symbol;
#X obj 81 513 delay;
#X obj 301 607 outlet;
#X obj 161 514 symbol;
#X text 297 629 duration;
#X obj 219 432 * 500;
#X text 332 432 convert tempo in beats per minute to the millisecond
duration of a beat \, then multiply the number of beats we're holding
by this value to set the delay;
#X obj 219 458 t b f f;
#X obj 81 482 / 1;
#X obj 27 455 r \$0-delay-factor;
#X obj 234 540 r \$0-octave;
#X text 245 13 first store the note that we're just about to play \,
then store it again so we can send it out another outlet after a delay
\, then calculate the duration for the note to be played.;
#X obj 171 122 note-duration-to-index;
#X obj 246 164 8;
#X obj 170 97 0.5;
#X obj 52 120 t s;
#X obj 81 120 t s;
#X obj 148 66 t b s s s;
#X text 275 175 We want all potential durations for the current pitch.
This can be thought of as a full row in the transition matrix so we
read 6 items in the array starting from the index as calculated by
the current pitch.;
#X text 315 103 Calculate the index in the array corresponding to the
first potential duration for the current pitch inputted. The first
potential duration is always 0.5 in our data representation.;
#X msg 142 263 0.5 1 1.5 2 2.5 3 3.5 4;
#X obj 171 182 array get \$2;
#X msg 74 31 d;
#X obj 76 57 symbol;
#X obj 383 345 r \$0-rhythm-temp;
#X obj 303 366 vary-prob-temp;
#X text 371 519 set the duration of the current note to be 95% of the
value specified;
#X obj 316 519 * 0.95;
#X text 635 559 Calculates the duration to play the current note for
and outputs the next note out of the rightmost outlet after that duration.
This patch is adapted from the rhythm subpatch provided by Michael
Edwards at http://michael-edwards.org/class/edi/music2d/markov.html
;
#X connect 0 0 32 0;
#X connect 1 0 4 0;
#X connect 2 0 5 0;
#X connect 3 0 2 0;
#X connect 4 0 39 0;
#X connect 4 1 2 1;
#X connect 5 0 8 0;
#X connect 5 1 44 0;
#X connect 8 0 24 0;
#X connect 9 0 36 0;
#X connect 14 0 16 0;
#X connect 16 0 24 1;
#X connect 18 0 10 0;
#X connect 19 0 11 0;
#X connect 20 0 19 0;
#X connect 22 0 18 0;
#X connect 24 0 26 0;
#X connect 26 0 22 0;
#X connect 26 2 27 0;
#X connect 26 2 46 0;
#X connect 27 0 20 0;
#X connect 28 0 27 1;
#X connect 29 0 18 1;
#X connect 31 0 40 0;
#X connect 32 0 40 1;
#X connect 33 0 31 0;
#X connect 34 0 19 1;
#X connect 35 0 22 1;
#X connect 36 0 33 0;
#X connect 36 1 31 1;
#X connect 36 2 34 0;
#X connect 36 3 35 0;
#X connect 39 0 3 0;
#X connect 40 0 1 0;
#X connect 41 0 42 0;
#X connect 42 0 36 0;
#X connect 43 0 44 1;
#X connect 44 0 8 1;
#X connect 46 0 21 0;
#X restore 68 500 pd rhythm;
#X obj 174 430 vary-prob-temp;
#X obj 660 59 s \$0-pitch-temp;
#X obj 282 414 r \$0-pitch-temp;
#X obj 769 22 inlet;
#X text 531 5 delay factor;
#X obj 769 60 s \$0-rhythm-temp;
#X text 638 83 Low temperature value -> More deterministic.;
#X text 638 101 High Temperature value -> More random.;
#X text 439 438 The rhythm subpatch calculates the duration the pitch
should be played for. It outputs a midi value \, a duration in milliseconds
and sends a bang out the rightmost outlet for the next pitch to start.
;
#X obj 67 626 outlet~;
#X obj 891 23 inlet;
#X text 886 6 Voice Volume;
#X obj 156 520 r \$0-volume;
#X obj 891 60 s \$0-volume;
#X obj 975 23 inlet;
#X text 970 6 Attack;
#X obj 975 60 s \$0-attack;
#X obj 1053 22 inlet;
#X text 1048 5 Decay;
#X obj 1053 60 s \$0-decay;
#X obj 1125 22 inlet;
#X text 1120 5 Sustain;
#X obj 1125 60 s \$0-sustain;
#X obj 1211 22 inlet;
#X text 1206 5 Release;
#X obj 1211 60 s \$0-release;
#X text 632 6 Pitch and Rhythm Probability temperatures;
#X obj 169 538 r \$0-attack;
#X obj 199 557 r \$0-decay;
#X obj 226 576 r \$0-sustain;
#X obj 256 596 r \$0-release;
#X obj 67 591 sin-synth, f 20;
#X obj 1295 22 inlet;
#X text 1290 5 Transpose;
#X obj 1295 60 s \$0-tranpose;
#X obj 26 553 + 0;
#X obj 10 430 r \$0-tranpose;
#X text 984 546 Plays a melody according to the inputted transition
matrices and settings using first order Markov Chains. This patch is
adapted from the monks.pd patch provided by Michael Edwards at http://michael-edwards.org/class/edi/music2d/markov.html
;
#X connect 0 0 14 1;
#X connect 1 0 33 0;
#X connect 2 0 3 0;
#X connect 3 0 33 1;
#X connect 4 0 1 0;
#X connect 5 0 4 0;
#X connect 5 1 1 1;
#X connect 6 0 10 0;
#X connect 7 0 11 0;
#X connect 8 0 7 0;
#X connect 9 0 8 0;
#X connect 10 0 9 0;
#X connect 10 1 7 1;
#X connect 11 0 34 0;
#X connect 11 1 36 0;
#X connect 13 0 14 0;
#X connect 14 0 5 0;
#X connect 15 0 14 0;
#X connect 17 0 0 0;
#X connect 18 0 29 0;
#X connect 20 0 31 0;
#X connect 21 0 37 0;
#X connect 27 0 30 0;
#X connect 32 0 35 1;
#X connect 33 0 6 0;
#X connect 34 0 35 0;
#X connect 35 0 71 0;
#X connect 35 1 67 1;
#X connect 35 2 13 0;
#X connect 36 0 34 1;
#X connect 38 0 36 1;
#X connect 39 0 41 0;
#X connect 46 0 49 0;
#X connect 48 0 67 2;
#X connect 50 0 52 0;
#X connect 53 0 55 0;
#X connect 56 0 58 0;
#X connect 59 0 61 0;
#X connect 63 0 67 3;
#X connect 64 0 67 4;
#X connect 65 0 67 5;
#X connect 66 0 67 6;
#X connect 67 0 45 0;
#X connect 68 0 70 0;
#X connect 71 0 67 0;
#X connect 71 0 12 0;
#X connect 72 0 71 1;
